{"version":3,"sources":["components/navbar.jsx","components/counter.jsx","components/counters.jsx","App.js","reportWebVitals.js","index.js"],"names":["navbar","counters","className","Counter","Fragment","this","props","counter","id","getBatchClasses","formatCount","onClick","onIncrement","onDelete","classes","value","Component","Counters","onReset","map","App","state","handleDelete","counterId","filter","c","setState","handleIncrement","index","indexOf","handleReset","length","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gQAuCeA,EAXA,SAACC,GACd,OACE,qBAAKC,UAAU,+BAAf,SACE,uBAAMA,UAAU,uBAAhB,mBACS,IACP,sBAAMA,UAAU,6BAAhB,SAA8CD,EAASA,iBCyChDE,E,4JA7Cb,WAAU,IAAD,OAIP,OAGE,cAFA,CAEC,IAAMC,SAAP,WAEE,yCAAYC,KAAKC,MAAMC,QAAQC,MAC/B,sBAAMN,UAAWG,KAAKI,kBAAtB,SAA0CJ,KAAKK,gBAM/C,wBACEC,QAAS,kBAAM,EAAKL,MAAMM,YAAY,EAAKN,MAAMC,UACjDL,UAAU,oBAFZ,kBAOA,wBACES,QAAS,kBAAM,EAAKL,MAAMO,SAAS,EAAKP,MAAMC,QAAQC,KACtDN,UAAU,qBAFZ,yB,6BAUN,WACE,IAAIY,EAAU,mBAEd,OADAA,GAAwC,IAA7BT,KAAKC,MAAMC,QAAQQ,MAAc,UAAY,Y,yBAI1D,WAAe,IACLA,EAAUV,KAAKC,MAAMC,QAArBQ,MACR,OAAiB,IAAVA,EAAc,OAASA,M,GApEZC,aCsBPC,E,4JArBb,WAAU,IAAD,EAC8CZ,KAAKC,MAAlDL,EADD,EACCA,SAAUiB,EADX,EACWA,QAASL,EADpB,EACoBA,SAAUD,EAD9B,EAC8BA,YAErC,OACE,gCACE,wBAAQV,UAAU,sBAAsBS,QAASO,EAAjD,mBAGCjB,EAASkB,KAAI,SAACZ,GAAD,OACZ,cAAC,EAAD,CAEEM,SAAUA,EACVD,YAAaA,EACbL,QAASA,GAHJA,EAAQC,c,GAXFQ,aCwDRI,E,4MAnDbC,MAAQ,CACNpB,SAAU,CACR,CAAEO,GAAI,EAAGO,MAAO,GAChB,CAAEP,GAAI,EAAGO,MAAO,GAChB,CAAEP,GAAI,EAAGO,MAAO,GAChB,CAAEP,GAAI,EAAGO,MAAO,K,EAIpBO,aAAe,SAACC,GACd,IAAMtB,EAAW,EAAKoB,MAAMpB,SAASuB,QAAO,SAACC,GAAD,OAAOA,EAAEjB,IAAMe,KAG3D,EAAKG,SAAS,CAAEzB,c,EAGlB0B,gBAAkB,SAACpB,GACjB,IAAMN,EAAQ,YAAO,EAAKoB,MAAMpB,UAC1B2B,EAAQ3B,EAAS4B,QAAQtB,GAC/BN,EAAS2B,GAAOb,QAChB,EAAKW,SAAS,CAAEzB,c,EAGlB6B,YAAc,WACZ,IAAM7B,EAAW,EAAKoB,MAAMpB,SAASkB,KAAI,SAACM,GAExC,OADAA,EAAEV,MAAQ,EACHU,KAET,EAAKC,SAAS,CAAEzB,c,4CAGlB,WACE,OAEE,eAAC,IAAMG,SAAP,WACE,cAAC,EAAD,CACEH,SAAUI,KAAKgB,MAAMpB,SAASuB,QAAO,SAACC,GAAD,OAAOA,EAAEV,MAAQ,KAAGgB,SAG3D,sBAAM7B,UAAU,YAAhB,SACE,cAAC,EAAD,CACED,SAAUI,KAAKgB,MAAMpB,SACrBY,SAAUR,KAAKiB,aACfJ,QAASb,KAAKyB,YACdlB,YAAaP,KAAKsB,2B,GA7CZX,aCMHgB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,MCAdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.edfce9b7.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\n// shortcut for creating stateless functional Component is \"sfc\"\r\n// shortcut for creating class is \"cc\"\r\n// \"imrc\" for importing react Component\r\n\r\n// if state is not used in a Component then it is called as a stateless functional component\r\n// in this case instead of using class we can use a function\r\n\r\n// class navbar extends Component {\r\n//   state = {};\r\n\r\n//   render() {\r\n//     return (\r\n// <nav className=\"navbar navbar-light bg-light\">\r\n//   <span className=\"navbar-brand mb-0 h1\">\r\n//     Navbar{\" \"}\r\n//     <span className=\"badge badge-secondary ml-3\">\r\n//       {this.props.counters}\r\n//     </span>\r\n//   </span>\r\n// </nav>\r\n//     );\r\n//   }\r\n// }\r\n\r\n// export default navbar;\r\n\r\nconst navbar = (counters) => {\r\n  return (\r\n    <nav className=\"navbar navbar-light bg-light\">\r\n      <span className=\"navbar-brand mb-0 h1\">\r\n        Navbar{\" \"}\r\n        <span className=\"badge badge-secondary ml-3\">{counters.counters}</span>\r\n      </span>\r\n    </nav>\r\n  );\r\n};\r\n\r\nexport default navbar;\r\n","import React, { Component } from \"react\";\r\n\r\nclass Counter extends Component {\r\n  // state is a object that includes data which the component needs\r\n\r\n  // bind event handlers to this by defining a constructor.. call the super class\r\n\r\n  // constructor() {\r\n  //   super();\r\n  //   this.handleIncrement = this.handleIncrement.bind(this);\r\n  //   // console.log(this);\r\n  // }\r\n\r\n  // another way to bind event handlers to this... is to create a arrow function\r\n\r\n  //   one way of using css\r\n  //   styles = {\r\n  //     color: \"black\",\r\n  //     fontSize: 20,\r\n  //     fontWeight: \"bold\",\r\n  //   };\r\n  //   <span style={this.styles} className=\"badge badge-primary m-2\"></span>\r\n\r\n  //   second way of using css\r\n  //   <span style={{fontSize:30}} className=\"badge badge-primary m-2\"></span>\r\n\r\n  // in this method we can use if and else i.e conditional statements\r\n  // renderTags() {}\r\n\r\n  render() {\r\n    // props are the attributes which are defined in the parent component\r\n    // key is not a property bec it is uniquely identifying key\r\n    // console.log(this.props);\r\n    return (\r\n      // react.fragment is used bec the div isn't doing anything\r\n\r\n      <React.Fragment>\r\n        {/* {this.props.children} */}\r\n        <h5>Counter{this.props.counter.id}</h5>\r\n        <span className={this.getBatchClasses()}>{this.formatCount()}</span>\r\n\r\n        {/* note the  onClick = this.handleIncrement  i.e no () after the function name\r\n        here we are not calling the function .. we are just refrencing it \r\n        */}\r\n\r\n        <button\r\n          onClick={() => this.props.onIncrement(this.props.counter)}\r\n          className=\"btn btn-secondary\"\r\n        >\r\n          Incr\r\n        </button>\r\n\r\n        <button\r\n          onClick={() => this.props.onDelete(this.props.counter.id)}\r\n          className=\"btn btn-danger m-4\"\r\n        >\r\n          Delete\r\n        </button>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n\r\n  getBatchClasses() {\r\n    let classes = \"badge m-2 badge-\";\r\n    classes += this.props.counter.value === 0 ? \"warning\" : \"primary\";\r\n    return classes;\r\n  }\r\n\r\n  formatCount() {\r\n    const { value } = this.props.counter;\r\n    return value === 0 ? \"Zero\" : value;\r\n  }\r\n}\r\n\r\nexport default Counter;\r\n","import React, { Component } from \"react\";\r\nimport Counter from \"./counter\";\r\nclass Counters extends Component {\r\n  render() {\r\n    const { counters, onReset, onDelete, onIncrement } = this.props;\r\n\r\n    return (\r\n      <div>\r\n        <button className=\"btn btn-success m-5\" onClick={onReset}>\r\n          Reset\r\n        </button>\r\n        {counters.map((counter) => (\r\n          <Counter\r\n            key={counter.id}\r\n            onDelete={onDelete}\r\n            onIncrement={onIncrement}\r\n            counter={counter}\r\n          ></Counter>\r\n        ))}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Counters;\r\n","import React, { Component } from \"react\";\n\nimport \"./App.css\";\nimport NavBar from \"./components/navbar\";\nimport Counters from \"./components/counters\";\n\nclass App extends Component {\n  state = {\n    counters: [\n      { id: 1, value: 4 },\n      { id: 2, value: 0 },\n      { id: 3, value: 0 },\n      { id: 4, value: 0 },\n    ],\n  };\n\n  handleDelete = (counterId) => {\n    const counters = this.state.counters.filter((c) => c.id != counterId);\n    // since the key and value is same i.e counters we can write it as...\n    // this.setState({counters: counters});\n    this.setState({ counters });\n  };\n\n  handleIncrement = (counter) => {\n    const counters = [...this.state.counters];\n    const index = counters.indexOf(counter);\n    counters[index].value++;\n    this.setState({ counters });\n  };\n\n  handleReset = () => {\n    const counters = this.state.counters.map((c) => {\n      c.value = 0;\n      return c;\n    });\n    this.setState({ counters });\n  };\n\n  render() {\n    return (\n      \n      <React.Fragment>\n        <NavBar\n          counters={this.state.counters.filter((c) => c.value > 0).length}\n        />\n\n        <main className=\"container\">\n          <Counters\n            counters={this.state.counters}\n            onDelete={this.handleDelete}\n            onReset={this.handleReset}\n            onIncrement={this.handleIncrement}\n          />\n        </main>\n      </React.Fragment>\n    );\n  }\n}\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n "],"sourceRoot":""}